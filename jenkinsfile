pipeline
{
    parameters
    {
        choice (name:'terraformAction',choices:['apply','destroy'],description:'choose any terraforaction')
    }
    environment
    {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    agent any
    stages
    {
        stage('git-checkout')
        {
            steps
            {
              git branch:'terraform-project-1',url:'https://github.com/MYPROJECTS555/terraform_project.git'
            }

        
        }
        stage('plan')
        {
            steps
            {
               sh '''
               cd project-realtime
               terraform init
               terraform plan -out=tfplan
               terraform show -no-color tfplan > tfplan.txt
               '''

            }
        }
        stage('approval')
        {
            steps
            {
                script
                {
                    def plan = readFile 'project-realtime/tfplan.txt'
                    input message : 'do you want to continue with terraformAction',
                    parameters:[test(name:'plan',description:'please review the plan',defaultValue:plan)]
                }
            }
        }
        stage('approval or destroy')
        {
            when
            {
                expression
                {
                   return params.terraformAction == 'apply' || params.terraformAction == 'destroy'

                }

            }
            steps
            {   
                script
                {
                if (params.terraformAction == 'apply') {
                        echo "Running terraform apply..."
                        sh '''
                        cd project-realtime/ && \\
                        terraform apply -input=false tfplan
                        '''
                    } else if (params.terraformAction == 'destroy') {
                        echo "Running terraform destroy..."
                        sh '''
                        cd project-realtime/ && \\
                        terraform destroy -auto-approve
                        '''
                    }

                }
            }
        }
    }
}
